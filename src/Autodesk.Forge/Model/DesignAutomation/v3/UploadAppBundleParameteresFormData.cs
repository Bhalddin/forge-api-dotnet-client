/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model.DesignAutomation.v3
{
    /// <summary>
    /// UploadAppBundleParameteresFormData
    /// </summary>
    [DataContract]
    [Obsolete("Please use NuGet package Autodesk.Forge.DesignAutomation instead")]
    public partial class UploadAppBundleParameteresFormData : Dictionary<String, Object>,  IEquatable<UploadAppBundleParameteresFormData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadAppBundleParameteresFormData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UploadAppBundleParameteresFormData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadAppBundleParameteresFormData" /> class.
        /// </summary>
        /// <param name="Key">Key (required).</param>
        /// <param name="ContentType">ContentType.</param>
        /// <param name="Policy">Policy (required).</param>
        /// <param name="SuccessActionStatus">SuccessActionStatus.</param>
        /// <param name="SuccessActionRedirect">SuccessActionRedirect.</param>
        /// <param name="XAmzSignature">XAmzSignature (required).</param>
        /// <param name="XAmzCredential">XAmzCredential (required).</param>
        /// <param name="XAmzAlgorithm">XAmzAlgorithm (required).</param>
        /// <param name="XAmzDate">XAmzDate (required).</param>
        /// <param name="XAmzServerSideEncryption">XAmzServerSideEncryption.</param>
        /// <param name="XAmzSecurityToken">XAmzSecurityToken.</param>
        public UploadAppBundleParameteresFormData(string Key = null, string ContentType = null, string Policy = null, string SuccessActionStatus = null, string SuccessActionRedirect = null, string XAmzSignature = null, string XAmzCredential = null, string XAmzAlgorithm = null, string XAmzDate = null, string XAmzServerSideEncryption = null, string XAmzSecurityToken = null)
        {
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for UploadAppBundleParameteresFormData and cannot be null");
            }
            else
            {
                this.Key = Key;
            }
            // to ensure "Policy" is required (not null)
            if (Policy == null)
            {
                throw new InvalidDataException("Policy is a required property for UploadAppBundleParameteresFormData and cannot be null");
            }
            else
            {
                this.Policy = Policy;
            }
            // to ensure "XAmzSignature" is required (not null)
            if (XAmzSignature == null)
            {
                throw new InvalidDataException("XAmzSignature is a required property for UploadAppBundleParameteresFormData and cannot be null");
            }
            else
            {
                this.XAmzSignature = XAmzSignature;
            }
            // to ensure "XAmzCredential" is required (not null)
            if (XAmzCredential == null)
            {
                throw new InvalidDataException("XAmzCredential is a required property for UploadAppBundleParameteresFormData and cannot be null");
            }
            else
            {
                this.XAmzCredential = XAmzCredential;
            }
            // to ensure "XAmzAlgorithm" is required (not null)
            if (XAmzAlgorithm == null)
            {
                throw new InvalidDataException("XAmzAlgorithm is a required property for UploadAppBundleParameteresFormData and cannot be null");
            }
            else
            {
                this.XAmzAlgorithm = XAmzAlgorithm;
            }
            // to ensure "XAmzDate" is required (not null)
            if (XAmzDate == null)
            {
                throw new InvalidDataException("XAmzDate is a required property for UploadAppBundleParameteresFormData and cannot be null");
            }
            else
            {
                this.XAmzDate = XAmzDate;
            }
            this.ContentType = ContentType;
            this.SuccessActionStatus = SuccessActionStatus;
            this.SuccessActionRedirect = SuccessActionRedirect;
            this.XAmzServerSideEncryption = XAmzServerSideEncryption;
            this.XAmzSecurityToken = XAmzSecurityToken;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="content-type", EmitDefaultValue=false)]
        public string ContentType { get; set; }
        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name="policy", EmitDefaultValue=false)]
        public string Policy { get; set; }
        /// <summary>
        /// Gets or Sets SuccessActionStatus
        /// </summary>
        [DataMember(Name="success_action_status", EmitDefaultValue=false)]
        public string SuccessActionStatus { get; set; }
        /// <summary>
        /// Gets or Sets SuccessActionRedirect
        /// </summary>
        [DataMember(Name="success_action_redirect", EmitDefaultValue=false)]
        public string SuccessActionRedirect { get; set; }
        /// <summary>
        /// Gets or Sets XAmzSignature
        /// </summary>
        [DataMember(Name="x-amz-signature", EmitDefaultValue=false)]
        public string XAmzSignature { get; set; }
        /// <summary>
        /// Gets or Sets XAmzCredential
        /// </summary>
        [DataMember(Name="x-amz-credential", EmitDefaultValue=false)]
        public string XAmzCredential { get; set; }
        /// <summary>
        /// Gets or Sets XAmzAlgorithm
        /// </summary>
        [DataMember(Name="x-amz-algorithm", EmitDefaultValue=false)]
        public string XAmzAlgorithm { get; set; }
        /// <summary>
        /// Gets or Sets XAmzDate
        /// </summary>
        [DataMember(Name="x-amz-date", EmitDefaultValue=false)]
        public string XAmzDate { get; set; }
        /// <summary>
        /// Gets or Sets XAmzServerSideEncryption
        /// </summary>
        [DataMember(Name="x-amz-server-side-encryption", EmitDefaultValue=false)]
        public string XAmzServerSideEncryption { get; set; }
        /// <summary>
        /// Gets or Sets XAmzSecurityToken
        /// </summary>
        [DataMember(Name="x-amz-security-token", EmitDefaultValue=false)]
        public string XAmzSecurityToken { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadAppBundleParameteresFormData {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  SuccessActionStatus: ").Append(SuccessActionStatus).Append("\n");
            sb.Append("  SuccessActionRedirect: ").Append(SuccessActionRedirect).Append("\n");
            sb.Append("  XAmzSignature: ").Append(XAmzSignature).Append("\n");
            sb.Append("  XAmzCredential: ").Append(XAmzCredential).Append("\n");
            sb.Append("  XAmzAlgorithm: ").Append(XAmzAlgorithm).Append("\n");
            sb.Append("  XAmzDate: ").Append(XAmzDate).Append("\n");
            sb.Append("  XAmzServerSideEncryption: ").Append(XAmzServerSideEncryption).Append("\n");
            sb.Append("  XAmzSecurityToken: ").Append(XAmzSecurityToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UploadAppBundleParameteresFormData);
        }

        /// <summary>
        /// Returns true if UploadAppBundleParameteresFormData instances are equal
        /// </summary>
        /// <param name="other">Instance of UploadAppBundleParameteresFormData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadAppBundleParameteresFormData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                ) && 
                (
                    this.Policy == other.Policy ||
                    this.Policy != null &&
                    this.Policy.Equals(other.Policy)
                ) && 
                (
                    this.SuccessActionStatus == other.SuccessActionStatus ||
                    this.SuccessActionStatus != null &&
                    this.SuccessActionStatus.Equals(other.SuccessActionStatus)
                ) && 
                (
                    this.SuccessActionRedirect == other.SuccessActionRedirect ||
                    this.SuccessActionRedirect != null &&
                    this.SuccessActionRedirect.Equals(other.SuccessActionRedirect)
                ) && 
                (
                    this.XAmzSignature == other.XAmzSignature ||
                    this.XAmzSignature != null &&
                    this.XAmzSignature.Equals(other.XAmzSignature)
                ) && 
                (
                    this.XAmzCredential == other.XAmzCredential ||
                    this.XAmzCredential != null &&
                    this.XAmzCredential.Equals(other.XAmzCredential)
                ) && 
                (
                    this.XAmzAlgorithm == other.XAmzAlgorithm ||
                    this.XAmzAlgorithm != null &&
                    this.XAmzAlgorithm.Equals(other.XAmzAlgorithm)
                ) && 
                (
                    this.XAmzDate == other.XAmzDate ||
                    this.XAmzDate != null &&
                    this.XAmzDate.Equals(other.XAmzDate)
                ) && 
                (
                    this.XAmzServerSideEncryption == other.XAmzServerSideEncryption ||
                    this.XAmzServerSideEncryption != null &&
                    this.XAmzServerSideEncryption.Equals(other.XAmzServerSideEncryption)
                ) && 
                (
                    this.XAmzSecurityToken == other.XAmzSecurityToken ||
                    this.XAmzSecurityToken != null &&
                    this.XAmzSecurityToken.Equals(other.XAmzSecurityToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                if (this.Policy != null)
                    hash = hash * 59 + this.Policy.GetHashCode();
                if (this.SuccessActionStatus != null)
                    hash = hash * 59 + this.SuccessActionStatus.GetHashCode();
                if (this.SuccessActionRedirect != null)
                    hash = hash * 59 + this.SuccessActionRedirect.GetHashCode();
                if (this.XAmzSignature != null)
                    hash = hash * 59 + this.XAmzSignature.GetHashCode();
                if (this.XAmzCredential != null)
                    hash = hash * 59 + this.XAmzCredential.GetHashCode();
                if (this.XAmzAlgorithm != null)
                    hash = hash * 59 + this.XAmzAlgorithm.GetHashCode();
                if (this.XAmzDate != null)
                    hash = hash * 59 + this.XAmzDate.GetHashCode();
                if (this.XAmzServerSideEncryption != null)
                    hash = hash * 59 + this.XAmzServerSideEncryption.GetHashCode();
                if (this.XAmzSecurityToken != null)
                    hash = hash * 59 + this.XAmzSecurityToken.GetHashCode();
                return hash;
            }
        }
    }

}

