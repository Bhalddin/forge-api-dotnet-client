/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model.DesignAutomation.v3
{
    /// <summary>
    /// BadRequestObjectResult
    /// </summary>
    [DataContract]
    [Obsolete("Please use NuGet package Autodesk.Forge.DesignAutomation instead")]
    public partial class BadRequestObjectResult :  IEquatable<BadRequestObjectResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BadRequestObjectResult" /> class.
        /// </summary>
        /// <param name="Value">Value.</param>
        /// <param name="Formatters">Formatters.</param>
        /// <param name="ContentTypes">ContentTypes.</param>
        /// <param name="DeclaredType">DeclaredType.</param>
        /// <param name="StatusCode">StatusCode.</param>
        public BadRequestObjectResult(Object Value = null, List<string> Formatters = null, List<string> ContentTypes = null, string DeclaredType = null, int? StatusCode = null)
        {
            this.Value = Value;
            this.Formatters = Formatters;
            this.ContentTypes = ContentTypes;
            this.DeclaredType = DeclaredType;
            this.StatusCode = StatusCode;
        }
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }
        /// <summary>
        /// Gets or Sets Formatters
        /// </summary>
        [DataMember(Name="formatters", EmitDefaultValue=false)]
        public List<string> Formatters { get; set; }
        /// <summary>
        /// Gets or Sets ContentTypes
        /// </summary>
        [DataMember(Name="contentTypes", EmitDefaultValue=false)]
        public List<string> ContentTypes { get; set; }
        /// <summary>
        /// Gets or Sets DeclaredType
        /// </summary>
        [DataMember(Name="declaredType", EmitDefaultValue=false)]
        public string DeclaredType { get; set; }
        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BadRequestObjectResult {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Formatters: ").Append(Formatters).Append("\n");
            sb.Append("  ContentTypes: ").Append(ContentTypes).Append("\n");
            sb.Append("  DeclaredType: ").Append(DeclaredType).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BadRequestObjectResult);
        }

        /// <summary>
        /// Returns true if BadRequestObjectResult instances are equal
        /// </summary>
        /// <param name="other">Instance of BadRequestObjectResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BadRequestObjectResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Formatters == other.Formatters ||
                    this.Formatters != null &&
                    this.Formatters.SequenceEqual(other.Formatters)
                ) && 
                (
                    this.ContentTypes == other.ContentTypes ||
                    this.ContentTypes != null &&
                    this.ContentTypes.SequenceEqual(other.ContentTypes)
                ) && 
                (
                    this.DeclaredType == other.DeclaredType ||
                    this.DeclaredType != null &&
                    this.DeclaredType.Equals(other.DeclaredType)
                ) && 
                (
                    this.StatusCode == other.StatusCode ||
                    this.StatusCode != null &&
                    this.StatusCode.Equals(other.StatusCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Formatters != null)
                    hash = hash * 59 + this.Formatters.GetHashCode();
                if (this.ContentTypes != null)
                    hash = hash * 59 + this.ContentTypes.GetHashCode();
                if (this.DeclaredType != null)
                    hash = hash * 59 + this.DeclaredType.GetHashCode();
                if (this.StatusCode != null)
                    hash = hash * 59 + this.StatusCode.GetHashCode();
                return hash;
            }
        }
    }

}

