/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model.DesignAutomation.v3
{
    /// <summary>
    /// An Engine executes a WorkItem job and processes the actions specified by an Activity. Engines are provided by Autodesk. AppBundles and Activities refer to Engines with their alias, e.g. Autodesk.Revit+23. ( request only ).
    /// </summary>
    [DataContract]
    [Obsolete("Please use NuGet package Autodesk.Forge.DesignAutomation instead")]
    public partial class Engine :  IEquatable<Engine>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Engine" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Engine() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Engine" /> class.
        /// </summary>
        /// <param name="Package">The URL that points to the zip package for the AppBundle..</param>
        /// <param name="ProductVersion">The product version of the engine (the version of the binary that will be uploaded). (required).</param>
        /// <param name="Description">Human readable description of the object..</param>
        /// <param name="Version">Version.</param>
        /// <param name="Id">Id.</param>
        public Engine(string Package = null, string ProductVersion = null, string Description = null, int? Version = null, string Id = null)
        {
            // to ensure "ProductVersion" is required (not null)
            if (ProductVersion == null)
            {
                throw new InvalidDataException("ProductVersion is a required property for Engine and cannot be null");
            }
            else
            {
                this.ProductVersion = ProductVersion;
            }
            this.Package = Package;
            this.Description = Description;
            this.Version = Version;
            this.Id = Id;
        }
        
        /// <summary>
        /// The URL that points to the zip package for the AppBundle.
        /// </summary>
        /// <value>The URL that points to the zip package for the AppBundle.</value>
        [DataMember(Name="package", EmitDefaultValue=false)]
        public string Package { get; set; }
        /// <summary>
        /// The product version of the engine (the version of the binary that will be uploaded).
        /// </summary>
        /// <value>The product version of the engine (the version of the binary that will be uploaded).</value>
        [DataMember(Name="productVersion", EmitDefaultValue=false)]
        public string ProductVersion { get; set; }
        /// <summary>
        /// Human readable description of the object.
        /// </summary>
        /// <value>Human readable description of the object.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Engine {\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  ProductVersion: ").Append(ProductVersion).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Engine);
        }

        /// <summary>
        /// Returns true if Engine instances are equal
        /// </summary>
        /// <param name="other">Instance of Engine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Engine other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Package == other.Package ||
                    this.Package != null &&
                    this.Package.Equals(other.Package)
                ) && 
                (
                    this.ProductVersion == other.ProductVersion ||
                    this.ProductVersion != null &&
                    this.ProductVersion.Equals(other.ProductVersion)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Package != null)
                    hash = hash * 59 + this.Package.GetHashCode();
                if (this.ProductVersion != null)
                    hash = hash * 59 + this.ProductVersion.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}

