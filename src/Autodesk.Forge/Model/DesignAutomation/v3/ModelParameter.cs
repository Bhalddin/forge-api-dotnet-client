/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Autodesk.Forge.Model.DesignAutomation.v3
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    [Obsolete("Please use NuGet package Autodesk.Forge.DesignAutomation instead")]
    public partial class ModelParameter :  IEquatable<ModelParameter>
    {
        /// <summary>
        /// Gets Verb.
        /// </summary>
        /// <value>Gets Verb.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerbEnum
        {
            
            /// <summary>
            /// Enum Get for "get"
            /// </summary>
            [EnumMember(Value = "get")]
            Get,
            
            /// <summary>
            /// Enum Head for "head"
            /// </summary>
            [EnumMember(Value = "head")]
            Head,
            
            /// <summary>
            /// Enum Put for "put"
            /// </summary>
            [EnumMember(Value = "put")]
            Put,
            
            /// <summary>
            /// Enum Post for "post"
            /// </summary>
            [EnumMember(Value = "post")]
            Post,
            
            /// <summary>
            /// Enum Patch for "patch"
            /// </summary>
            [EnumMember(Value = "patch")]
            Patch,
            
            /// <summary>
            /// Enum Read for "read"
            /// </summary>
            [EnumMember(Value = "read")]
            Read
        }

        /// <summary>
        /// Gets Verb.
        /// </summary>
        /// <value>Gets Verb.</value>
        [DataMember(Name="verb", EmitDefaultValue=false)]
        public VerbEnum? Verb { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelParameter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelParameter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelParameter" /> class.
        /// </summary>
        /// <param name="Zip">The parameter references a zip file. This is how this is interpreted in various scenarios: 1. verb&#x3D;&#x3D;get implies that the byte stream should be unzipped to a folder designated by localName. 2. verb&#x3D;&#x3D;put, patch, post the contents of the file or folder designated by localName will be zipped and sent. 3. Any other verb values result in an error. Default is false. (default to false).</param>
        /// <param name="Ondemand">The parameter will be accessed by the custom app on demand and should not be used by the system. Default is false. (default to false).</param>
        /// <param name="Verb">Gets Verb. (required).</param>
        /// <param name="Description">Gets the description of the parameter..</param>
        /// <param name="Required">Gets if the corresponding Argument is required to be specified. Default false. (default to false).</param>
        /// <param name="LocalName">Gets or set the file or folder where he contents of an UrlArgument are placed. Note that this may be different than the &#x60;localName&#x60; for input arguments when [Content-Disposition] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) header is specifified by the server. For &#x60;zip&#x60; &#x3D; &#x60;true&#x60; this is a folder name. See Activity.instructions for more information..</param>
        public ModelParameter(bool? Zip = null, bool? Ondemand = null, VerbEnum? Verb = null, string Description = null, bool? Required = null, string LocalName = null)
        {
            // to ensure "Verb" is required (not null)
            if (Verb == null)
            {
                throw new InvalidDataException("Verb is a required property for ModelParameter and cannot be null");
            }
            else
            {
                this.Verb = Verb;
            }
            // use default value if no "Zip" provided
            if (Zip == null)
            {
                this.Zip = false;
            }
            else
            {
                this.Zip = Zip;
            }
            // use default value if no "Ondemand" provided
            if (Ondemand == null)
            {
                this.Ondemand = false;
            }
            else
            {
                this.Ondemand = Ondemand;
            }
            this.Description = Description;
            // use default value if no "Required" provided
            if (Required == null)
            {
                this.Required = false;
            }
            else
            {
                this.Required = Required;
            }
            this.LocalName = LocalName;
        }
        
        /// <summary>
        /// The parameter references a zip file. This is how this is interpreted in various scenarios: 1. verb&#x3D;&#x3D;get implies that the byte stream should be unzipped to a folder designated by localName. 2. verb&#x3D;&#x3D;put, patch, post the contents of the file or folder designated by localName will be zipped and sent. 3. Any other verb values result in an error. Default is false.
        /// </summary>
        /// <value>The parameter references a zip file. This is how this is interpreted in various scenarios: 1. verb&#x3D;&#x3D;get implies that the byte stream should be unzipped to a folder designated by localName. 2. verb&#x3D;&#x3D;put, patch, post the contents of the file or folder designated by localName will be zipped and sent. 3. Any other verb values result in an error. Default is false.</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public bool? Zip { get; set; }
        /// <summary>
        /// The parameter will be accessed by the custom app on demand and should not be used by the system. Default is false.
        /// </summary>
        /// <value>The parameter will be accessed by the custom app on demand and should not be used by the system. Default is false.</value>
        [DataMember(Name="ondemand", EmitDefaultValue=false)]
        public bool? Ondemand { get; set; }
        /// <summary>
        /// Gets the description of the parameter.
        /// </summary>
        /// <value>Gets the description of the parameter.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets if the corresponding Argument is required to be specified. Default false.
        /// </summary>
        /// <value>Gets if the corresponding Argument is required to be specified. Default false.</value>
        [DataMember(Name="required", EmitDefaultValue=false)]
        public bool? Required { get; set; }
        /// <summary>
        /// Gets or set the file or folder where he contents of an UrlArgument are placed. Note that this may be different than the &#x60;localName&#x60; for input arguments when [Content-Disposition] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) header is specifified by the server. For &#x60;zip&#x60; &#x3D; &#x60;true&#x60; this is a folder name. See Activity.instructions for more information.
        /// </summary>
        /// <value>Gets or set the file or folder where he contents of an UrlArgument are placed. Note that this may be different than the &#x60;localName&#x60; for input arguments when [Content-Disposition] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html#sec19.5.1) header is specifified by the server. For &#x60;zip&#x60; &#x3D; &#x60;true&#x60; this is a folder name. See Activity.instructions for more information.</value>
        [DataMember(Name="localName", EmitDefaultValue=false)]
        public string LocalName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelParameter {\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Ondemand: ").Append(Ondemand).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  LocalName: ").Append(LocalName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ModelParameter);
        }

        /// <summary>
        /// Returns true if ModelParameter instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelParameter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Zip == other.Zip ||
                    this.Zip != null &&
                    this.Zip.Equals(other.Zip)
                ) && 
                (
                    this.Ondemand == other.Ondemand ||
                    this.Ondemand != null &&
                    this.Ondemand.Equals(other.Ondemand)
                ) && 
                (
                    this.Verb == other.Verb ||
                    this.Verb != null &&
                    this.Verb.Equals(other.Verb)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Required == other.Required ||
                    this.Required != null &&
                    this.Required.Equals(other.Required)
                ) && 
                (
                    this.LocalName == other.LocalName ||
                    this.LocalName != null &&
                    this.LocalName.Equals(other.LocalName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Zip != null)
                    hash = hash * 59 + this.Zip.GetHashCode();
                if (this.Ondemand != null)
                    hash = hash * 59 + this.Ondemand.GetHashCode();
                if (this.Verb != null)
                    hash = hash * 59 + this.Verb.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Required != null)
                    hash = hash * 59 + this.Required.GetHashCode();
                if (this.LocalName != null)
                    hash = hash * 59 + this.LocalName.GetHashCode();
                return hash;
            }
        }
    }

}

