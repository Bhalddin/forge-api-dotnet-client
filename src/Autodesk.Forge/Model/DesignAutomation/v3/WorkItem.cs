/* 
 * Forge SDK
 *
 * The Forge Platform contains an expanding collection of web service components that can be used with Autodesk cloud-based products or your own technologies. Take advantage of Autodesk’s expertise in design and engineering.
 *
 * OpenAPI spec version: 0.1.0
 * Contact: forge.help@autodesk.com 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

namespace Autodesk.Forge.Model.DesignAutomation.v3
{
    /// <summary>
    /// A WorkItem is a specification of the processing job for an Activity, and it is submitted to and executed by an engine. Note that a WorkItem cannot be modified after it has been created. ( request only ).
    /// </summary>
    [DataContract]
    [Obsolete("Please use NuGet package Autodesk.Forge.DesignAutomation instead")]
    public partial class WorkItem :  IEquatable<WorkItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WorkItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItem" /> class.
        /// </summary>
        /// <param name="Id">Gets Id..</param>
        /// <param name="ActivityId">Reference to the activity that this workitem will invoke.  Examples: &#x60;MyPlot+Prod&#x60; (an activity created by the caller) or  &#x60;Autodesk.PlotToPdf&#x60; (an activity created by someone else and shared with this caller). (required).</param>
        /// <param name="Arguments">Arguments of the workitem..</param>
        /// <param name="Signatures">Signatures for various workitem attributes..</param>
        public WorkItem(string Id = null, string ActivityId = null, Dictionary<string, JObject> Arguments = null, WorkItemSignatures Signatures = null)
        {
            // to ensure "ActivityId" is required (not null)
            if (ActivityId == null)
            {
                throw new InvalidDataException("ActivityId is a required property for WorkItem and cannot be null");
            }
            else
            {
                this.ActivityId = ActivityId;
            }
            this.Id = Id;
            this.Arguments = Arguments;
            this.Signatures = Signatures;
        }
        
        /// <summary>
        /// Gets Id.
        /// </summary>
        /// <value>Gets Id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Reference to the activity that this workitem will invoke.  Examples: &#x60;MyPlot+Prod&#x60; (an activity created by the caller) or  &#x60;Autodesk.PlotToPdf&#x60; (an activity created by someone else and shared with this caller).
        /// </summary>
        /// <value>Reference to the activity that this workitem will invoke.  Examples: &#x60;MyPlot+Prod&#x60; (an activity created by the caller) or  &#x60;Autodesk.PlotToPdf&#x60; (an activity created by someone else and shared with this caller).</value>
        [DataMember(Name="activityId", EmitDefaultValue=false)]
        public string ActivityId { get; set; }
        /// <summary>
        /// Arguments of the workitem.
        /// </summary>
        /// <value>Arguments of the workitem.</value>
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public Dictionary<string, JObject> Arguments { get; set; }
        /// <summary>
        /// Signatures for various workitem attributes.
        /// </summary>
        /// <value>Signatures for various workitem attributes.</value>
        [DataMember(Name="signatures", EmitDefaultValue=false)]
        public WorkItemSignatures Signatures { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  Signatures: ").Append(Signatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as WorkItem);
        }

        /// <summary>
        /// Returns true if WorkItem instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ActivityId == other.ActivityId ||
                    this.ActivityId != null &&
                    this.ActivityId.Equals(other.ActivityId)
                ) && 
                (
                    this.Arguments == other.Arguments ||
                    this.Arguments != null &&
                    this.Arguments.SequenceEqual(other.Arguments)
                ) && 
                (
                    this.Signatures == other.Signatures ||
                    this.Signatures != null &&
                    this.Signatures.Equals(other.Signatures)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ActivityId != null)
                    hash = hash * 59 + this.ActivityId.GetHashCode();
                if (this.Arguments != null)
                    hash = hash * 59 + this.Arguments.GetHashCode();
                if (this.Signatures != null)
                    hash = hash * 59 + this.Signatures.GetHashCode();
                return hash;
            }
        }
    }

}

